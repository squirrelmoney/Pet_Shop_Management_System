1.商品种类(商品种类号,商品种类)

type(tId char(4),tName char(4)）
2.顾客 (顾客号，顾客名，电话，性别 )
customer(cId char(4),cname char(20),tel char(11)，gender(2))
3.职位号(职位号,职位名)

position(positionId char(4),position char(20))

4.工资表(工资单号,基本工资,五险一金,各种津贴，第一工资)

payroll(payId char(4),basepay char(10),insurance char(10),allowance char(10),salary char(10)）
5.职员(员工号,姓名,手机号,职位号,工资单号,奖金，最后工资)

employees(eId char(4),ename char(20),tel char(11),positionId char(8), payId char(8),reward char(10),wages char(10))
6.订单号(订单号,顾客号,总价,负责人)

ident（iId char(4),cid char(4),allprice char(10),eid char(4))
7.普通商品(普通商品号,订单号,数量，商品种类号,商品名，售价)

petsgoods (pgId char(4),iId char(4),numbers char(10),gname char(20)，price char(10))
8.宠物商品(宠物商品号,订单号，数量，商品种类号，性别，年龄,血统,售价）
pets（pId char(4),iId char(4)，numbers char(10)，gname char(20),gender char(2),age char(4),plevel char(10),price char(10))
9.库存（商品种类号，进货价，售出价，进货数量，售出数量,库存，负责人）
stock（tid char（4)，priceIn char(10),goodsin char(10),goodsout char(10),present char(10)，eid char(4))
10.反馈信息(顾客号,评价内容,负责人,评分,状态)
massage（cId char（4）,massage char(10) ,eid char(5),score char(10),states char(10)）

---------------------------------create---------------------------------------------------
drop table massage;
drop table pets;
drop table petgoods;
drop table ident;
drop table stock;
drop table customer;
drop table goodtype;
drop table empoyees;
drop table payroll;
drop table positions;



create table goodtype(
tId char(8) primary key,
tName char(20)
);

create table customer(
cId char(8) primary key,
cname char(20),
tel char(11),
gender char(2)
);


create table positions(
positionId char(8) primary key,
position char(20)
);

create table payroll(
payId char(8) primary key,
basepay char(10),
insurance char(10),
allowance char(10),
salary char(10),
position char(20)
);


create table empoyees(
eId char(8) primary key,
ename char(20),
tel char(11),
positionId char(8),
payId char(8),
reward char(8),
finalwages char(8),
FOREIGN KEY (positionId) REFERENCES positions(positionId),
FOREIGN KEY (payId) REFERENCES payroll(payId)
);


create table ident(
iId char(8) primary key,
cid char(8),
allprice char(10),
eid char(8),
FOREIGN KEY (eId) REFERENCES empoyees(eId),
FOREIGN KEY (cId) REFERENCES customer(cId)
);


create table stock(
gId char(8) primary key,
gname char(20),
priceIn char(10),
priceout char(10),
goodsin char(10),
goodsout char(10),
present char(20),
eId char(8),
tId char(8)
FOREIGN KEY (eId) REFERENCES empoyees(eId),
FOREIGN KEY (tId) REFERENCES goodtype(tid)
);



create table petgoods(
pgId char(8) primary key,
iId char(8),
gId char(8),
gname char(20),
price char(10),
numbers char(10),
eId char(8)
FOREIGN KEY (iId) REFERENCES ident(iId),
FOREIGN KEY (gId) REFERENCES stock(gId)
)
;
create table pets(
pId char(8) primary key,
iId char(8),
gId char(8),
gname char(20),
numbers char(10),
gender char(5),
age char(8),
plevel char(10),
price char(10),
eId char(8)
FOREIGN KEY (iId) REFERENCES ident(iId),
FOREIGN KEY (gId) REFERENCES stock(gId)
);
create table massage(
cId char(8),
massage char(50) ,
eId char(8),
score char(8),
states char(8),
FOREIGN KEY (cId) REFERENCES customer(cId),
FOREIGN KEY (eId) REFERENCES empoyees(eId)
);





--------------------------------insert-------------------------------------

insert into goodtype values('t001','食品类');
insert into goodtype values('t002','洗漱类');
insert into goodtype values('t003','医药类');
insert into goodtype values('t004','动物类');
insert into goodtype values('t006','宠物用具类');

insert into customer values('c001','顾客1','13293848391','女');
insert into customer values('c002','顾客2','13293848392','男');
insert into customer values('c003','顾客3','13293848393','男');
insert into customer values('c004','顾客4','13293848394','女');
insert into customer values('c005','顾客5','13293848395','男');
insert into customer values('c006','顾客6','13293848396','女');
insert into customer values('c007','顾客7','13293848397','女');
insert into customer values('c008','顾客8','13293848398','女');


insert into positions values('p001','门店经理');
insert into positions values('p002','售货员');
insert into positions values('p003','售后员');
insert into positions values('p004','仓库管理员');


insert into payroll values('pay001','8000','1200','50','6800','门店经理');
insert into payroll values('pay002','5000','1200','40','3840','售货员');
insert into payroll values('pay003','4500','1200','30','3230','售后员');
insert into payroll values('pay004','3000','1200','60','1860','仓库管理员');


insert into empoyees values('e001','员工1','13158964351','p001','pay001','0','6800');
insert into empoyees values('e002','员工2','13158964353','p002','pay002','0','3840');
insert into empoyees values('e003','员工3','13158964354','p002','pay002','0','3840');
insert into empoyees values('e004','员工4','13158964355','p002','pay002','0','3840');
insert into empoyees values('e005','员工5','13158964356','p003','pay003','0','3230');
insert into empoyees values('e006','员工6','13158964357','p003','pay003','0','3230');
insert into empoyees values('e007','员工7','13158964358','p004','pay004','0','1860');
insert into empoyees values('e008','员工7','13158964358','p004','pay004','0','1860');



insert into ident values('i001','c001','0','e003');
insert into ident values('i002','c002','0','e002');
insert into ident values('i003','c003','0','e003');
insert into ident values('i004','c004','0','e002');
insert into ident values('i005','c005','0','e004');
insert into ident values('i006','c006','0','e003');
insert into ident values('i007','c007','0','e002');
insert into ident values('i008','c008','0','e004');


insert into stock values('g001','猫饲料1','30','80','200','80','120','e007','t001');
insert into stock values('g002','猫饲料2','15','50','200','70','130','e007','t001');
insert into stock values('g003','狗饲料1','40','100','200','88','112','e007','t001');
insert into stock values('g004','狗饲料2','45','120','200','65','135','e007','t001');
insert into stock values('g005','宠物用具1','15','80','200','88','112','e007','t006');
insert into stock values('g006','宠物用具2','70','180','200','77','123','e007','t006');
insert into stock values('g007','宠物洗漱品1','60','180','200','44','156','e007','t002');
insert into stock values('g008','宠物洗漱品2','135','280','200','66','134','e007','t002');
insert into stock values('g009','苏格兰折耳猫','1200','3000','10','7','3','e007','t004');
insert into stock values('g010','英国短毛猫','1500','3500','10','6','4','e008','t004');
insert into stock values('g011','布偶猫','5000','13000','80','4','6','e008','t004');
insert into stock values('g012','哈士奇犬','1000','200','10','5','5','e008','t004');
insert into stock values('g013','拉布拉多犬','1000','2500','10','6','4','e008','t004');
insert into stock values('g014','雪纳瑞犬','1000','2500','10','4','6','e008','t004');


insert into petgoods values('pg001','i001','g001','猫饲料1','80','2','e002');
insert into petgoods values('pg002','i001','g006','宠物用具2','150','1','e002');
insert into petgoods values('pg003','i002','g002','猫饲料2','50','3','e004');
insert into petgoods values('pg004','i003','g005','宠物用具1','80','1','e004');
insert into petgoods values('pg005','i003','g007','洗漱用品1','180','1','e004');
insert into petgoods values('pg006','i004','g008','洗漱用品2','280','2','e002');
insert into petgoods values('pg007','i005','g002','猫饲料2','50','5','e003');
insert into petgoods values('pg008','i005','g006','宠物用具2','80','5','e003');
insert into petgoods values('pg009','i001','g007','洗漱用品1','80','2','e002');
insert into petgoods values('pg010','i006','g002','猫饲料2','50','5','e003');
insert into petgoods values('pg011','i007','g006','宠物用具2','80','5','e003');
insert into petgoods values('pg012','i008','g007','洗漱用品1','80','2','e002');





insert into pets values('p001','i001','g009','苏格兰折耳猫','1','雌性','三个月','血统级','3000','e002');
insert into pets values('p002','i002','g011','布偶猫','1','雌性','三个月','血统级','13000','e004');
insert into pets values('p003','i004','g012','哈士奇','1','雄性','半年','宠物级','2000','e002');
insert into pets values('p004','i005','g013','拉布拉多','1','雄性','三个月','宠物级','2500','e004');
insert into pets values('p005','i006','g014','雪纳瑞犬','1','雄性','半年','宠物级','2500','e002');
insert into pets values('p006','i007','g013','拉布拉多','1','雄性','三个月','宠物级','2500','e004');


insert into massage values('c001','宠物用品质量有问题','e005','6','未解决');
insert into massage values('c002','宠物吃了饲料拉肚子','e006','7','未解决');
insert into massage values('c003','宠物用洗漱用品后掉毛','e006','7','未解决');
insert into massage values('c004','宠物玩具掉色','e005','6','未解决');





-----------------------------proc---------------------------
--1通过存储过程统计客户购买商品信息
alter proc pet1 @cId char(8)
as
begin
select  gname,numbers,price
from petgoods 
where iId in(
select iId  from ident 
where cId=@cId
)union 
select gname,numbers,price
from pets
where iId in(
select iId from ident 
where cId=@cId
)
end





--2若有人请辞职,找另一个人替代工作
alter proc pet2
@e1 char(8),@e2 char(8)
as
begin
if exists (select * from ident where eid=@e2)
update ident
set eId=@e1
where eId=@e2
if exists (select * from stock where eid=@e2)
update stock
set eId=@e1
where eId=@e2
if exists (select * from massage where eid=@e2)
update massage
set eId=@e1
where eId=@e2
delete from empoyees where eId=@e2
end




--3创建存储过程,查询是否有一半程序员的工资在6000元之上
--如果不到分别每次给每个程序员加薪300元,至之一半程序员的工资达到6000以上
alter proc pet3 
@a char(8)
as
declare @allPeople int,@renshu int,@addsalary int
begin
set @addsalary=0
select @allPeople=count(*) from empoyees
while 1=1
begin
select @renshu=count(*) 
from empoyees 
where payId in(
select payId
from payroll
where salary>=@a)
if @renshu<(@allPeople/2)
begin
update payroll set salary=salary+300,basepay=basepay+300
set @addsalary=@addsalary+300
end
else
begin
break
end
end
print '共加工资'+convert(varchar(10), @addsalary)+'元'
end

exec pet3'6000'



--4通过存储过程实现进货
alter proc pet4
@gId char(8),
@gname char(20),
@priceIn char(10),
@Number int,
@eId char(8),
@tId char(8)
as
declare @GNumber int=0
begin 
if exists (select * from stock where gId=@gId) --判断当前商品有没有进货记录
begin
update stock
set goodsin=goodsin+@Number,present+=@Number
where gId=@gId 
end 
else --这个商品从来没有过进货记录，那么就应该添加新的存在信息
begin
insert into stock values(@gId,@gname,@priceIn,'0',@Number,'0',@Number,@eId,@tId)  
end
end






--5通过存储过程计算卖出商品所得利润
alter proc pet5
@gId char(8)
as
declare @lirun bigint
begin
select @lirun=(cast(goodsin as int)-cast(goodsout as int))*(cast(priceout as int)-cast(priceIn as int))
from stock
where gId=@gId
end
begin
print @lirun
end




--6通过查询过程查找员工信息
alter proc pet6
@eId char(8)
as
declare @ename char(10),@position char(10),@tel char(20),@salary char(10)
begin
if exists (select * from empoyees where eId=@eId)
begin
select @ename=ename,@tel=tel
from empoyees
where eId=@eId
select @position =position
from positions 
where positionId=(
select positionId
from empoyees
where eId=@eId)
select @salary=salary 
from payroll
where payId=(
select payId
from empoyees
where eId=@eId)
print '员工号:'+@eId+'员工名：'+@ename +'职位：'+@position+'电话：'+@tel+'工资：'+@salary
end
else
begin
print'该员工不存在'
end
end




--7通过存储过程实现非宠物类商品退货
alter proc pet7
@pgId char(8),@number char(8)--输入退货商品号与数量
as
declare @cId char(8),@price int,@num char(8)
begin
select @price=price,@num=numbers--查找要退货的商品价格与购买总数
from petgoods
where pgId=@pgId
select @cId=cid--查找要退货的客户号
from ident
where iId=(
select iId
from petgoods
where pgId=@pgId)
end
if(@number=@num)--如果要退货的商品与购买总数相等，删除该记录
begin
delete from petgoods
where pgId=@pgId
if exists (select * from petgoods
          where iId=
          (select iId
          from ident where cId=@cId))--如果该客户在普通商品还有其它订单
begin
update ident --更新订单总价格
set allprice=cast(allprice as int)-cast(@price as int)*cast(@num as int)
where cid=@cId
print '退货成功，已把客户信息更新'
end
else if exists (select * from pets--如果该客户在普通商品没有其它订单，但宠物商品还有其它订单
				  where iId=(
				  select iId
				  from ident where cId=@cId))
begin
update ident --更新订单总价格
set allprice=cast(allprice as int)-cast(@price as int)*cast(@num as int)
where cid=@cId
print '退货成功，已把客户信息更新'
end
else--如果该客户都没有商品了
begin
delete from ident where cId=@cId--删除在订单的记录
delete from customer where cId=@cId--删除在客户表的订单
print '该客户退货后已无其它订单，已把该客户从数据库中删除'
end
end
else if(@number <@num)
begin
update petgoods set numbers=@number where pgId=@pgId
end




--更新客户信息
create proc pet8 
@cId char(8), @cname char(20),@tel char(11),@gender char(2)
as
begin
update customer
set cname=@cname,tel=@tel,gender=@gender
where cId=@cId
end

---------------------------------------触发器---------------------------------------------------
--disable trigger trg_p1 on  petgoods;

--1创建触发器，当顾客购买商品时，更新或添加新的顾客、订单信息（普通商品）
create trigger trg_p1
on petgoods
instead of insert
as
declare @cId char(4),@cname char(20)--顾客单
declare @pgId char(8),@iId char(8),@price int,@numbers int--普通商品
declare @allprice int,@eId char(8),@gId char(8),@gname char(20)--订单表
begin
select @pgId=pgId,@iId=iId,@price=price,@numbers=numbers,@gId=gId,@gname=gname,@eId=eId from inserted --获取插入的信息
set @allprice=@price*@numbers
if exists (select pgId from petgoods where iId=@iId)--如果是旧顾客，更新订单信息
begin
update petgoods set numbers =numbers+@numbers where iId=@iId
print '已更新购买信息'
end 
if exists (select iId from ident where iId=@iId)--如果是旧顾客，更新订单信息
begin
update ident set allprice =cast((cast(allprice as int)+@allprice) as char(10)) where iId=@iId 
print '已更新订单'+cast(@allprice as varchar)
begin
insert into petgoods values(@pgId,@iId,@gId,@gname,@price,@numbers,@eId);
print '已插入购买记录'
end
end
else--如果是新顾客,创建新的顾客信息与订单信息
begin
declare @n int
select @n=count(*) from customer 
begin
if(@n<9)
set @cId='c00'+CAST(@n+1 as varchar)
else if(@n<99)
set @cId='c0'+CAST(@n+1 as varchar)
else if(@n<999)
set @cId='c'+CAST(@n+1 as varchar)
print '这是店里的第'+@cId+'位顾客'
end
begin
insert into customer values(@cId,null,null,null)
print '已添加顾客入系统，请尽快更新信息'
end
begin
insert into ident values(@iId,@cId,@allprice,@eId)
print '已创建订单'
end
begin
insert into petgoods values(@pgId,@iId,@gId,@gname,@price,@numbers,@eId);
print '已插入购买记录'
end
end
end


--2店员可从售出商品中抽取%5作为奖金(普通商品――新顾客购买时)
create trigger trg_pet3
on petgoods
after insert
as
declare @reward int,@numbers int,@price int,@eId char(8)
begin
select @numbers=numbers,@price=price,@eId=eId from inserted
set @reward=@numbers*@price*0.05
print '购买商品数：'+cast(@numbers as varchar)
update empoyees set reward=cast((cast(reward as int)+@reward) as CHAR),
finalwages=cast((cast(finalwages as int)+@reward) as CHAR)
where eId=@eId
print '从售卖普通商品中可获奖金为'+cast(@reward as varchar)
end


--3店员可从售出商品中抽取%5作为奖金(普通商品――旧顾客购买时)
create trigger trg_pet4
on petgoods
for update
as
declare @reward int,@numbers int,@price int,@eId char(8)
declare @numbers1 int,@numbers2 int
begin
if update(numbers) 
begin
select @numbers1=numbers,@price=price from deleted
set @numbers2=(select cast(Inserted.numbers as int) from petgoods inner join inserted on petgoods.pgId=Inserted.pgId)
set @reward=(cast(@numbers2 as int)-cast(@numbers1 as int) )*@price*0.08
print '购买商品数：'+cast((cast(@numbers2 as int)-cast(@numbers1 as int) ) as varchar)
update empoyees set reward=cast((cast(reward as int)+@reward) as CHAR),
finalwages=cast((cast(finalwages as int)+@reward) as CHAR)
where eId=@eId
print '从售卖宠物中可获奖金为'+cast(@reward as varchar)
end
end








--4创建触发器，当顾客购买商品时，更新或添加新的顾客、订单信息（宠物）
alter trigger trg_p2
on pets
instead of insert
as
declare @cId char(4),@cname char(20)--顾客单
declare @pId char(8),@iId char(8),@price int,@numbers int,@gId char(8),@gname char(20),
@gender char(5),@age char(8),@plevel char(10),@eId char(8)--宠物商品
declare @allprice int--订单表
begin
select @pId=pId,@iId=iId,@price=price,@numbers=numbers,@gender=gender,@age=age,@plevel=plevel,
@gId=gId,@gname=gname,@eId=eId from inserted --获取插入的信息
set @allprice=@price*@numbers
if exists (select pId from pets where iId=@iId)--如果是旧顾客，更新订单信息
begin
update pets set numbers =numbers+@numbers where iId=@iId
print '已更新购买信息'
end 
if exists (select iId from ident where iId=@iId)--如果是旧顾客，更新订单信息
begin
update ident set allprice =cast((cast(allprice as int)+@allprice) as char(10)) where iId=@iId 
print '已更新订单'+cast(@allprice as varchar)
begin
insert into pets values(@pId,@iId,@gId,@gname,@numbers,@gender,@age,@plevel,@price,@eId);
print '已插入购买记录'
end
end
else--如果是新顾客,创建新的顾客信息与订单信息
begin
declare @n int
select @n=count(*) from customer 
begin
if(@n<9)
set @cId='c00'+CAST(@n+1 as varchar)
else if(@n<99)
set @cId='c0'+CAST(@n+1 as varchar)
else if(@n<999)
set @cId='c'+CAST(@n+1 as varchar)
print '这是店里的第'+@cId+'位顾客'
end
begin
insert into customer values(@cId,null,null,null)
print '已添加顾客入系统，请尽快更新信息'
end
begin
insert into ident values(@iId,@cId,@allprice,@eId)
print '已创建订单'
end
begin
insert into pets values(@pId,@iId,@gId,@gname,@numbers,@gender,@age,@plevel,@price,@eId);
print '已插入购买记录'
end
end
end



--5店员可从售出商品中抽取%8作为奖金(宠物-新顾客购买时)
create trigger trg_pet5
on pets
for insert
as
declare @reward int,@numbers int,@price int,@eId char(8)
begin
select @numbers=numbers,@price=price,@eId=eId from inserted
set @reward=@numbers*@price*0.08
print '购买商品数：'+cast(@numbers as varchar)
update empoyees set reward=cast((cast(reward as int)+@reward) as CHAR),
finalwages=cast((cast(finalwages as int)+@reward) as CHAR)
where eId=@eId
print '从售卖宠物中可获奖金为'+cast(@reward as varchar)
end



--6店员可从售出商品中抽取%8作为奖金(宠物-旧顾客购买时)
create trigger trg_pet6
on pets
for update
as
declare @reward int,@numbers1 int,@numbers2 int,@price int,@eId char(8)
begin
if update(numbers) 
begin
select @numbers1=numbers,@price=price from deleted
print @numbers1
set @numbers2=(select cast(Inserted.numbers as int) from pets inner join inserted on pets.pId=Inserted.pId)
set @reward=(cast(@numbers2 as int)-cast(@numbers1 as int) )*@price*0.08
print '购买商品数：'+cast((cast(@numbers2 as int)-cast(@numbers1 as int) )as varchar)
update empoyees set reward=cast((cast(reward as int)+@reward) as CHAR),
finalwages=cast((cast(finalwages as int)+@reward) as CHAR) 
where eId=@eId
print '从售卖宠物中可获奖金为'+cast(@reward as varchar)
end
end








--7用户评分，如果超出范围(1~10)则插入数据失败
create trigger trg_pet7
on massage
instead of insert
as
declare @cId char(8),@massage char(20),@eId char(8),@score char(10),@states char(10)
begin
select @score=score,@cId=cId,@massage=massage ,@eId=eId,@states=states from inserted
if(@score<=0 or @score>10)
print '你的评价分数必须在1~10分的范围，评价失败'
else 
insert into massage values(@cId,@massage,@eId,@score,@states)
print '评价成功'
end

insert into massage values('c005','用具被狗咬坏了','e004','7','未解决');

select * from massage


--8如果售后帮客户解决了问题，员工可获工资的%3作为奖金
create trigger  trg_pets8
on massage
for update
as
declare @cId char(8),@eId char(8),@states char(10),@reward int,@payId char(8),@basepay char(10)
begin
if update(states)
begin
select @eId=eId,@cId=cId,@eId=eId,@states=states from deleted
end
if(@states='已解决')
begin
select @reward=reward,@payId=payId from empoyees where eId=@eId
select @basepay=basepay from payroll where payId=@payId
set @reward=cast(@basepay as int)*0.03
update empoyees set finalwages =cast(finalwages as bigint) +cast(@reward as bigint),reward=@reward  where eId=@eId
print '已加奖金'
print @reward
end
end

